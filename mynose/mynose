#!/usr/bin/python

import subprocess
import sys
import os

class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'

    def disable(self):
        self.HEADER = ''
        self.OKBLUE = ''
        self.OKGREEN = ''
        self.WARNING = ''
        self.FAIL = ''
        self.ENDC = ''

def OK(msg):
        return bcolors.OKGREEN + msg + bcolors.ENDC

def INFO(msg):
        return bcolors.OKBLUE + msg + bcolors.ENDC

def NOK(msg):
        return bcolors.FAIL + msg + bcolors.ENDC

class ResultOutput():

	def __init__(self):
		self.buffer = []
		self.processed = ""
	
	def append(self, line):
		self.buffer += line

	def append_line(self, line):
		self.buffer += line + "\n"

	def get_buffer(self):
		return self.buffer

	def get_processed(self):
		return self.processed

	def post_process(self):
		prev_line = ""
		same_count = 1
		for line in self.buffer:
			if line == prev_line:
				same_count += 1
			else:
				if same_count > 1:
					times = "(%s)" % str(same_count)
					self.processed += "%s %s" % (prev_line, INFO(times))
				self.processed += line
				same_count = 1
            
			prev_line=line

if __name__ =="__main__":

	if len(sys.argv) != 2:
		print "Usage: %s <testfile>" % sys.argv[0]
		exit(1)

	test_file = sys.argv[1]
	test_file = os.path.abspath(test_file)

	def run_command(command):
		p = subprocess.Popen(command,
							 stdout=subprocess.PIPE,	
		                     stderr=subprocess.PIPE)
		return iter(p.stderr.readline, b'')

	command = ['nosetests', '-s', '-v', test_file]
	
	print "Starting Test: %s" % test_file

	skip_lines = ["neutronclient.client: DEBUG:", "novaclient.client: DEBUG:"]

	result = ResultOutput()

	for line in run_command(command):
		line = line.strip()
		if line == "" or line in skip_lines:
			continue
		elif "Traceback" in line:
			result.append_line(NOK(line))
		elif line.startswith("-"):
			pass # delete all iptable rules output
		elif line.startswith("REQ:"):
			result.append("REQ |")
		elif line.startswith("novaclient.client: DEBUG: RESP"):
			result.append_line("RESP (nova)")
		elif line.startswith("RESP BODY"):
			result.append_line("RESP BODY (nova)")
		elif line.startswith("neutronclient.client: DEBUG: RESP"):
			result.append_line("RESP (neutron)")
		elif "RESP:" in line:
			result.append_line("RESP (other)")
		else:
			result.append_line(line)

	result.post_process()
	
	print "PROCESSSED:"
	print result.get_processed()

	



